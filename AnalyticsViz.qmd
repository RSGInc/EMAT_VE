---
title: METRO - VERSPM - WFH
jupyter: python3
format:
    html:
        code-fold: true
---



```{python}
#| name: imports
import os

import asyncio
import logging
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import plotly.io; plotly.io.templates.default = "seaborn"
import seaborn; seaborn.set_theme()
import yaml

import emat
from emat.util.show_dir import show_dir
from emat.analysis import display_experiments
from emat.analysis import contrast_experiments
from emat.analysis import feature_scores
from emat.analysis import Visualizer
from emat.analysis.feature_scoring import threshold_feature_scores
from emat.model import create_metamodel
from emat.util.loggers import timing_log
from emat.util.xmle import Show
from emat.util.loggers import log_to_stderr
log = log_to_stderr(logging.INFO)
from emat.workbench.analysis import CART

import emat_verspm

```

```{python}
#| name: parameters
#| scrolled: true

database_path = os.path.join(
    os.getcwd(),"EMAT-VE-Database", "metro-verspm-06112023-500.db"
)

number_of_experiment = 500

```

### Show the Scope Info

```{python}
#| name: load_data
#| include: false
db = emat.SQLiteDB(database_path, initialize=False)
model_scope = db.read_scope()
fx = emat_verspm.VERSPMModel(db=db, scope=model_scope)

```

```{python}
#| scrolled: false
fx.scope.info()
```

```{python}
num_samples = number_of_experiment
design_name = 'exp' + str(num_samples)
# if design_name not in fx.db.read_design_names(fx.scope.name):
#     design1 = fx.design_experiments(n_samples=num_samples, design_name=design_name, sampler='ulhs')
# else:
#     design1 = fx.db.read_experiment_parameters(fx.scope.name,design_name=design_name)
# design1.head()
```


### Load results

```{python}
#| name: load_results
#| warning: false
results = fx.db.read_experiment_all(fx.scope.name, design_name=design_name)
results.head()

```

```{python}
#| scrolled: true
display_experiments(fx.scope, results)
```


```{python}
#| eval: false
if 'ref' in fx.db.read_design_names(fx.scope.name):
    ref_point = fx.db.read_experiment_all(fx.scope.name,design_name='ref')
else:
    ref_point = fx.run_reference_experiment()
```

### Create Metamodel

```{python}
#| scrolled: false
# Filter results to be used for metamodel
#measure_vars_df = pd.read_csv(os.path.join(os.getcwd(), os.pardir, os.pardir, 'metamodel_variables.csv'))
measure_vars = [var_name for var_name in model_scope.get_measure_names()]
measure_vars = np.unique(measure_vars)
input_vars = model_scope.get_uncertainty_names() + model_scope.get_lever_names()
print(f'metamodel:',)
print(f'  inputs:',)
for var_name in input_vars:
    print(f'     {var_name}',)
print(f'  outputs:',)
for var_name in measure_vars:
    print(f'     {var_name}',)
```

```{python}
#| scrolled: false
#| warning: false
#| message: false

metamodel_id = 1

with timing_log("create metamodel"):
    try:
        mm = fx.db.read_metamodel(fx.scope.name, metamodel_id)
    except:
        mm = create_metamodel(fx.scope, results, metamodel_id=metamodel_id, suppress_converge_warnings=True, db=fx.db,
                             random_state=121, include_measures=measure_vars)
    # display(mm.cross_val_scores())
```


```{python}
#| scrolled: true

mm_design = mm.design_experiments(n_samples=4000)
mm_results = mm.run_experiments(mm_design)
mm_results

```



```{python}
#| scrolled: true

viz = Visualizer(scope=fx.scope, data=mm_results)
display(viz.complete())
```



```{python}

viz_results = Visualizer(scope=fx.scope, data=results)#, reference_point=ref_point)
display(viz_results.complete())
```


```{python}
#| scrolled: true
#from MM Results
display(viz.two_way(x='PAYDHHPROP', y='Dvmt'))
```


```{python}
#| scrolled: true
fig, ax = plt.subplots()
ax = mm_results.plot.scatter(
    c='CongPrice',
    y='VehicleTrips',
    x='Dvmt_pc',
    cmap='coolwarm',
    ax=ax,
)
```


```{python}
#| scrolled: false
display(viz.complete(measures=fx.scope.get_measure_names()))
```

```{python}
#| scrolled: false
#from Original Results
display(viz.two_way(x='PAYDHHPROP', y='Dvmt'))
```


```{python}
#| scrolled: true
viz.selection_feature_scores()
```

```{python}
#| scrolled: false
fx_fs = feature_scores(fx.scope, results, cmap='copper')
fx_fs
```

```{python}
#| scrolled: true

threshold_feature_scores(fx.scope, 'Dvmt_pc', mm_results)
```

```{python}
#| scrolled: false
feature_scores(fx.scope, mm_results, return_type='figure')
```

```{python}
Show(threshold_feature_scores(fx.scope, 'Dvmt_pc', mm_results, return_type='ridge figure.svg'))
```

```{python}
#| eval: false
#not working
viz.splom(
    rows=('PAYDHHPROP'),
    cols=('Dmvt_pc'),
)

```


```{python}
prim = viz.prim(target="Dvmt_pc <= 12.05")
```

```{python}
prim.tradeoff_selector()
```

```{python}
of_interest = mm_results['Dvmt_pc'] <= 11.5
```

```{python}
cart = CART(
    mm_results,
    of_interest,
)
```

```{python}
#| scrolled: false
chooser = cart.tree_chooser()
chooser
```

```{python}
#| eval: false

#not working
box = cart.select(1)

from emat.analysis.feature_scoring import threshold_feature_scores
fx_fs = threshold_feature_scores(fx.scope, 'HouseholdDvmtPerHh', results, cmap='copper')
fx_fs

#Testing cells
mm.regression.estimators[1][1]

#testing cell
picked_design = mm.pick_new_experiments(design2, batch_size=60,scope=fx.scope,design_name='pexp60',debug=['Bicycles', 'StateTotalGGE2045'])
picked_design


```
